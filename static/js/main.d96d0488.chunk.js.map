{"version":3,"sources":["logo.svg","store/simulator/action.js","components/Square.js","components/Grid.js","components/Step1.js","components/Obstacle/Obstacle.js","components/Obstacle/ObstacleContainer.js","components/Step2.js","components/Container.js","App.js","reportWebVitals.js","store/simulator/util.js","store/simulator/reducer.js","store/store.js","index.js"],"names":["UPDATE_NO_OF_ROWS","UPDATE_NO_OF_COLUMNS","UPDATE_NO_OF_OBSTRUCTIONS","UPDATE_NO_OF_STARTPOINT","UPDATE_GRID","INSERT_OBSTACLE","SIMULATEFLOW","RESET_USED_OBSTRUCTION","updateStartPoint","newStartPoint","type","startPoint","Square","props","value","x","y","isStartPoint","isSimulate","dispatch","useDispatch","useSelector","simulator","rows","columns","obstructions","grid","useState","hoverState","setHoverState","useEffect","squareColor","useDrop","accept","drop","monitor","didDrop","item","getItem","console","log","obstructionId","insertObstacle","collect","isOver","collectedProps","ref","style","backgroundColor","cursor","opacity","color","width","height","borderStyle","borderWidth","borderColor","onClick","onMouseEnter","onMouseLeave","Grid","setCurrentStep","initialGrid","i","j","squares","length","row","push","display","flexWrap","useStyles","makeStyles","root","Step1","classes","handleChange","event","id","target","className","container","spacing","direction","Typography","variant","gutterBottom","Slider","defaultValue","valueLabelDisplay","step","marks","min","max","onChange","Button","Obstacle","useDrag","isDragging","drag","margin","ObstacleContainer","usedObstructions","obstruction_array","includes","map","index","Step2","setIsSimulate","resetStartPoint","DndProvider","backend","HTML5Backend","justify","md","align","size","disabled","Copyright","Link","href","theme","paper","marginTop","flexDirection","alignItems","avatar","form","submit","MainContainer","currentStep","Container","component","maxWidth","CssBaseline","Avatar","noValidate","Box","mt","App","obstaclesCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","simulateWaterFlow","startCell","initialState","rootReducer","combineReducers","state","action","newGrid","concat","createStore","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.d96d0488.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const UPDATE_NO_OF_ROWS = \"UPDATE_NO_OF_ROWS\";\r\nexport const UPDATE_NO_OF_COLUMNS = \"UPDATE_NO_OF_COLUMNS\";\r\nexport const UPDATE_NO_OF_OBSTRUCTIONS = \"UPDATE_NO_OF_OBSTRUCTIONS\";\r\nexport const UPDATE_NO_OF_STARTPOINT = \"UPDATE_NO_OF_STARTPOINT\";\r\nexport const UPDATE_GRID = \"UPDATE_GRID\";\r\nexport const INSERT_OBSTACLE = \"INSERT_OBSTACLE\";\r\nexport const RESET = \"RESET\";\r\nexport const SIMULATEFLOW = \"SIMULATEFLOW\";\r\nexport const RESET_USED_OBSTRUCTION = \"RESET_USED_OBSTRUCTION\"\r\n\r\nexport const updateRows = (newRows) => {\r\n    return { type: UPDATE_NO_OF_ROWS, rows: newRows };\r\n}\r\nexport const updateColumns = (newColumns) => {\r\n    return { type: UPDATE_NO_OF_COLUMNS, columns: newColumns };\r\n}\r\nexport const updateObstructions = (newObstructions) => {\r\n    return { type: UPDATE_NO_OF_OBSTRUCTIONS, obstructions: newObstructions };\r\n}\r\nexport const resetUsedObstruction = () => {\r\n    return { type: RESET_USED_OBSTRUCTION};\r\n}\r\nexport const updateStartPoint = (newStartPoint) => {\r\n    return { type: UPDATE_NO_OF_STARTPOINT, startPoint: newStartPoint };\r\n}\r\nexport const insertObstacle = (x, y, obstructionId) => {\r\n    return { type: INSERT_OBSTACLE, x, y, obstructionId: obstructionId };\r\n}\r\nexport const updateGrid = (newGrid) => {\r\n    return { type: UPDATE_GRID, grid: newGrid };\r\n}\r\nexport const simulateFlow = () => {\r\n    return { type: SIMULATEFLOW }\r\n}\r\n\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport {useDrop}  from 'react-dnd';\r\nimport {insertObstacle, simulateFlow, updateStartPoint} from '../store/simulator/action';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nexport default function Square(props) {\r\n    const {value, x, y, isStartPoint, isSimulate} = props;\r\n    const dispatch = useDispatch();\r\n    const { rows, columns, obstructions, startPoint, grid } = useSelector(({ simulator }) => simulator);\r\n\r\n    const [hoverState, setHoverState] = useState(false);\r\n\r\n    const handleSimulate = () => {\r\n        if(isStartPoint && isSimulate && (startPoint===null || (startPoint && startPoint.x===-1 && startPoint.y===-1 ))){\r\n            dispatch(updateStartPoint({x:x,y}))\r\n        }\r\n        \r\n    }\r\n    useEffect(()=>{\r\n        if(startPoint){\r\n            dispatch(simulateFlow());\r\n        }\r\n    },[startPoint]);\r\n\r\n    let squareColor = \"white\";\r\n    if(value===0){\r\n        squareColor = \"white\"\r\n    }else if (value === -1){\r\n        squareColor = \"black\"\r\n    }else if(value === 1){\r\n        squareColor = \"lightblue\"\r\n    }else{\r\n        squareColor = \"black\"\r\n    }\r\n    const [collectedProps, drop] = useDrop(() => ({\r\n        accept:[\"OBSTACLE\"],\r\n        drop: (props, monitor) => {\r\n            if(monitor.didDrop()){\r\n                return \r\n            }\r\n            const item = monitor.getItem()\r\n            console.log(item);\r\n            dispatch(insertObstacle(x, y, item.value))\r\n        },\r\n        collect: monitor => {{\r\n            isOver: monitor.isOver()\r\n        }}\r\n      }))\r\n      console.log(collectedProps)\r\n      const mouseEnterHandler = () => {\r\n        setHoverState(true);\r\n      }\r\n      const mouseLeaveHandler = () => {\r\n        setHoverState(false);\r\n      }\r\n    return (\r\n        <div\r\n             ref={drop}\r\n            style={{\r\n                backgroundColor: isStartPoint?\"blue\":squareColor,\r\n                cursor:isStartPoint && isSimulate?\"pointer\":\"default\",\r\n                opacity: (isStartPoint && hoverState && isSimulate)?0.5:1,\r\n                color: squareColor,\r\n                width: '100%',\r\n                height: '100%',\r\n                borderStyle: \"solid\",\r\n                borderWidth: 0.5,\r\n                borderColor: \"black\",\r\n            }}\r\n            onClick={handleSimulate}\r\n            onMouseEnter={mouseEnterHandler}\r\n            onMouseLeave={mouseLeaveHandler}\r\n        >\r\n            {\"\"}\r\n        </div>\r\n    );\r\n}","import React, { useEffect } from 'react'\r\nimport Square from './Square';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { updateGrid } from '../store/simulator/action';\r\n\r\nexport default function Grid(props) {\r\n    const dispatch = useDispatch();\r\n    const {setCurrentStep, isSimulate} = props\r\n    const {rows, columns, obstructions, startPoint, grid} = useSelector(({simulator})=> simulator);\r\n   \r\n    useEffect(()=>{\r\n        let initialGrid = [];\r\n        for(let i=0;i<rows+1;i++){\r\n            initialGrid[i] = [];\r\n            for(let j=0;j<columns;j++){\r\n                initialGrid[i][j] = 0;\r\n            }\r\n        }\r\n        dispatch(updateGrid(initialGrid));\r\n    }, []);\r\n    let squares = [];\r\n    if(grid){\r\n        for(let i=0;i<grid.length;i++){\r\n            let row = grid[i];\r\n            console.log(row)\r\n            for(let j=0;j<row.length;j++){\r\n                squares.push(\r\n                    <div key={i+\"-\"+j} style={{ width: (100/row.length)+'%', height: (100/grid.length)+'%' }}>\r\n                        <Square value={grid[i][j]} x={i} y={j} isStartPoint={i===0?true:false} isSimulate={isSimulate}/>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n    // let squareStartCells = [];\r\n    // if(grid){\r\n    //     for(let j=0;j<grid[0].length;j++){\r\n    //         squareStartCells.push(\r\n    //             <div key={0+\"-\"+j} style={{ width: (100/grid[0].length)+'%', height: (100/grid.length)+'%'}}>\r\n    //             <Square value={grid[0][j]} x={0} y={j} isStartPoint={true}/>\r\n    //             </div>\r\n    //         )\r\n    //     }\r\n    // }\r\n      \r\n    return (\r\n        <div>\r\n            {/* <div\r\n            style={{\r\n                width: '300px',\r\n                height: '150px',\r\n                display: 'flex',\r\n                flexWrap: 'wrap'\r\n            }}\r\n        >\r\n            {squareStartCells}\r\n        </div> */}\r\n              <div\r\n            style={{\r\n                width: '300px',\r\n                height: '300px',\r\n                display: 'flex',\r\n                flexWrap: 'wrap'\r\n            }}\r\n        >\r\n            {squares}\r\n        </div>\r\n        </div>\r\n      \r\n    );\r\n\r\n}","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Button, Grid } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateRows, updateColumns, updateObstructions } from '../store/simulator/action'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n});\r\n\r\n\r\n\r\nexport default function Step1(props) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const { setCurrentStep } = props;\r\n  const {rows, columns, obstructions} = useSelector(({simulator})=> simulator);\r\n\r\n  const handleChange = (event, value) => {\r\n    const id = event.target.id;\r\n    console.log(event.target.id, value)\r\n    if (id === \"rows-slider\") {\r\n      dispatch(updateRows(value))\r\n\r\n    } else if (id === \"columns-slider\") {\r\n      dispatch(updateColumns(value))\r\n\r\n    } else if (id === \"obstruction-slider\")\r\n      dispatch(updateObstructions(value))\r\n  }\r\n  const handleNext = () => {\r\n    setCurrentStep(1);\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={2} direction=\"column\">\r\n        <Grid item>\r\n        <Typography id=\"create-grid\" variant=\"h6\" gutterBottom>\r\n            Grid Creation\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item >\r\n          <Typography id=\"rows-slider-label\" gutterBottom>\r\n            Number of rows\r\n          </Typography>\r\n          <Slider\r\n            value={rows}\r\n            id=\"rows-slider\"\r\n            defaultValue={rows}\r\n            aria-labelledby=\"rows-slider-label\"\r\n            valueLabelDisplay=\"auto\"\r\n            step={1}\r\n            marks\r\n            min={1}\r\n            max={10}\r\n            onChange={handleChange}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography id=\"columns-slider-label\" gutterBottom>\r\n            Number of columns\r\n          </Typography>\r\n          <Slider\r\n            value={columns}\r\n            id=\"columns-slider\"\r\n            defaultValue={columns}\r\n            aria-labelledby=\"columns-slider-label\"\r\n            valueLabelDisplay=\"auto\"\r\n            step={1}\r\n            marks\r\n            min={1}\r\n            max={10}\r\n            onChange={handleChange}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n\r\n          <Typography id=\"obstruction-slider-label\" gutterBottom>\r\n            Number of obstruction\r\n          </Typography>\r\n          <Slider\r\n            value={obstructions}\r\n            id=\"obstruction-slider\"\r\n            defaultValue={obstructions}\r\n            aria-labelledby=\"obstruction-slider-label\"\r\n            valueLabelDisplay=\"auto\"\r\n            step={1}\r\n            marks\r\n            min={1}\r\n            max={10}\r\n            onChange={handleChange}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleNext}>Next</Button>\r\n\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\nimport {useDrag}  from 'react-dnd';\r\nexport default function Obstacle(props) {\r\n    const {value} = props;\r\n   const [{isDragging}, drag] = useDrag({\r\n       type: \"OBSTACLE\",\r\n       item: {type: \"OBSTACLE\", value: value},\r\n       collect: monitor => ({\r\n           isDragging: !!monitor.isDragging()\r\n       })\r\n   });\r\n    return (\r\n        <div\r\n            ref={drag}\r\n            style={{\r\n                opacity: isDragging?0.5:1,\r\n                cursor: \"grab\",\r\n                backgroundColor: \"black\",\r\n                width: '20px',\r\n                height: '20px',\r\n                borderStyle: \"solid\",\r\n                borderWidth: 0.5,\r\n                borderColor: \"black\",\r\n                margin:5\r\n            }}\r\n        >\r\n            {value}\r\n        </div>\r\n    );\r\n}","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Obstacle from './Obstacle';\r\n\r\nexport default function ObstacleContainer(props) {\r\n    const dispatch = useDispatch();\r\n    const { setCurrentStep } = props\r\n    const { rows, columns, obstructions, usedObstructions } = useSelector(({ simulator }) => simulator);\r\n    let obstruction_array = [];\r\n    \r\n    if (obstructions) {\r\n        for (let i = 1; i <= obstructions; i++) {\r\n            if(!usedObstructions.includes(i)){\r\n                obstruction_array.push(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    let squares = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        for (let j = 0; j < 2; j++) {\r\n            squares.push(\r\n\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            {obstruction_array.map((index) => {\r\n                return (\r\n                    <div key={\"Obstruction-\" + index} style={{ width: (100 / 2) + '%', height: (100 / 5) + '%' }}>\r\n                        <Obstacle key={index} value={index} />\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n\r\n    );\r\n\r\n}","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Obstacle from './Obstacle/ObstacleContainer';\r\nimport GridMatrix from './Grid';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Button, Typography } from '@material-ui/core';\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport ObstacleContainer from './Obstacle/ObstacleContainer';\r\nimport { updateStartPoint, resetUsedObstruction } from '../store/simulator/action';\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n    },\r\n});\r\n\r\n\r\nexport default function Step2(props) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const { obstructions, usedObstructions, startPoint } = useSelector(({ simulator }) => simulator);\r\n    const [isSimulate, setIsSimulate] = useState(false);\r\n    const { setCurrentStep } = props;\r\n    \r\n    const handleBack = () => {\r\n        if(isSimulate){\r\n            setIsSimulate(false);\r\n            resetStartPoint();\r\n            return;\r\n        }\r\n        setCurrentStep(0);\r\n    }\r\n    const handleStartSimulation = () => {\r\n        setIsSimulate(true)\r\n    }\r\n    const resetStartPoint = () => {\r\n        dispatch(updateStartPoint({x:-1, y:-1}));\r\n    }\r\n    const resetObstacles = () => {\r\n        dispatch(resetUsedObstruction());\r\n    }\r\n    return (\r\n            <DndProvider backend={HTML5Backend}>\r\n                 \r\n                <Grid container spacing={3} justify=\"center\">\r\n                    <Grid item md={12}>\r\n                    <Typography id=\"create-grid\" align=\"center\" gutterBottom>\r\n                        {isSimulate?\"Select the workflow start point by clicking on any of the blue box\":\"Drag the obstruction and place it inside the grid (white boxes)\"}\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <GridMatrix {...props} isSimulate={isSimulate} />\r\n                    </Grid>\r\n                    {!isSimulate && \r\n                     <Grid item>\r\n                     <ObstacleContainer usedObstructions={usedObstructions}/>\r\n                 </Grid>\r\n                    }\r\n                   \r\n                    <Grid item container spacing={2} justify=\"center\">\r\n                        <Grid item>\r\n                            <Button size=\"small\" variant=\"outlined\" color=\"secondary\" onClick={handleBack}>Back</Button>\r\n\r\n                        </Grid>\r\n                       \r\n                        {isSimulate &&\r\n                            <Grid item>\r\n                            <Button disabled={!startPoint || startPoint.x===-1 || startPoint.y===-1} size=\"small\" variant=\"contained\" color=\"secondary\" onClick={resetStartPoint}>Reset start point</Button>\r\n\r\n                            </Grid>\r\n                        }\r\n                          {!isSimulate && <Grid item>\r\n                            <Button  disabled={usedObstructions.length===0} size=\"small\" variant=\"outlined\" color=\"secondary\" onClick={resetObstacles}>Reset Obstacles</Button>\r\n\r\n                        </Grid>\r\n                        }\r\n                        {!isSimulate && <Grid item>\r\n                            <Button disabled={usedObstructions.length===0} size=\"small\" variant=\"contained\" color=\"primary\" onClick={handleStartSimulation}>Start simulation</Button>\r\n\r\n                        </Grid>\r\n                        }\r\n                      \r\n\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </DndProvider>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Box from '@material-ui/core/Box';\r\nimport OpacityIcon from '@material-ui/icons/Opacity';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Step1 from './Step1';\r\nimport Step2 from './Step2';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Created by '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        \r\n      </Link>{' Subramanyam S S'}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    //backgroundColor: theme.palette.secondary.main,\r\n    backgroundColor: \"blue\"\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function MainContainer(props) {\r\n  const classes = useStyles();\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <OpacityIcon />\r\n        </Avatar>\r\n        <Typography gutterBottom component=\"h1\" variant=\"h5\">\r\n          Waterflow Simulator\r\n        </Typography>\r\n        <br></br>\r\n        \r\n        {currentStep===0 && <form className={classes.form} noValidate>\r\n        <Step1 {...props} setCurrentStep={setCurrentStep}/>\r\n       \r\n        </form>} \r\n        {currentStep===1&&\r\n            <Step2 {...props} setCurrentStep={setCurrentStep}/>\r\n        }\r\n      </div>\r\n      <Box mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport Grid from './components/Grid';\nimport Step1 from './components/Step1';\nimport Container from './components/Container'\nimport { useState } from 'react';\nfunction App() {\n  const [matrix, setMatrix] = useState([[0,2,0],[0,0,0],[0,0,0]]);\n  const [rows, setRows] = useState(0);\n  const [columns, setColumns] = useState(0);\n  const [obstaclesCount, setObstaclesCount] = useState(0);\n\n  return (\n    <div>\n      <Container  rows={rows} columns={columns} obstaclesCount={obstaclesCount} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const simulateWaterFlow = (grid, startCell) => {\r\n    console.log(startCell);\r\n \r\n    if(grid[startCell.x][startCell.y] === 0){\r\n        grid[startCell.x][startCell.y] = 1;\r\n    }\r\n\r\n    if(startCell.x === grid.length-1){\r\n        return grid;\r\n    }\r\n    if(grid[(startCell.x)+1][startCell.y] === 0){\r\n        return simulateWaterFlow(grid, {x: startCell.x+1, y:startCell.y});\r\n    }\r\n    if(startCell.x !== 0 && grid[(startCell.x)+1][startCell.y] === -1){\r\n        if(grid[startCell.x][startCell.y+1] === 0){\r\n            grid = simulateWaterFlow(grid, {x: startCell.x, y:startCell.y+1})\r\n        }   \r\n        if(grid[startCell.x][startCell.y-1] === 0){\r\n            grid = simulateWaterFlow(grid, {x: startCell.x, y:startCell.y-1})\r\n        } \r\n        return grid;\r\n    }\r\n    return grid;\r\n}","import { UPDATE_NO_OF_ROWS, UPDATE_NO_OF_COLUMNS, UPDATE_NO_OF_OBSTRUCTIONS, RESET_USED_OBSTRUCTION, UPDATE_NO_OF_STARTPOINT, INSERT_OBSTACLE, UPDATE_GRID, SIMULATEFLOW } from './action';\r\nimport {simulateWaterFlow} from './util'\r\nconst initialState = {\r\n    rows: 1,\r\n    columns: 1,\r\n    obstructions: 1,\r\n    usedObstructions:[],\r\n    startPoint: null,\r\n    grid: null\r\n}\r\n\r\nexport default function simulatorReducer(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_NO_OF_ROWS: {\r\n            return {\r\n                ...state,\r\n                rows: action.rows\r\n            }\r\n        }\r\n        case UPDATE_NO_OF_COLUMNS: {\r\n            return {\r\n                ...state,\r\n                columns: action.columns\r\n            }\r\n        }\r\n        case UPDATE_NO_OF_OBSTRUCTIONS: {\r\n            return {\r\n                ...state,\r\n                obstructions: action.obstructions\r\n            }\r\n        }\r\n        case RESET_USED_OBSTRUCTION: {\r\n            let newGrid = state.grid;\r\n            for(let i=0;i<state.rows+1;i++){\r\n                for(let j=0;j<state.columns;j++){\r\n                    if(newGrid[i][j] === -1){\r\n                        newGrid[i][j] = 0\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                grid: newGrid,\r\n                usedObstructions: []\r\n            }\r\n        }\r\n        case UPDATE_NO_OF_STARTPOINT: {\r\n            return {\r\n                ...state,\r\n                startPoint: action.startPoint\r\n            }\r\n        }\r\n        case UPDATE_GRID: {\r\n            return {\r\n                ...state,\r\n                grid: action.grid,\r\n                usedObstructions:[]\r\n            }\r\n        }\r\n        case INSERT_OBSTACLE: {\r\n            let grid = state.grid;\r\n            grid[action.x][action.y] = -1\r\n            return {\r\n                ...state,\r\n                usedObstructions: state.usedObstructions.concat(action.obstructionId),\r\n                grid: grid\r\n            }\r\n        }\r\n        case SIMULATEFLOW: {\r\n            console.log(action.startPoint);\r\n            let newGrid = state.grid;\r\n            if(state.startPoint.x === -1 && state.startPoint.y === -1){\r\n                for(let i=0;i<state.rows+1;i++){\r\n                    for(let j=0;j<state.columns;j++){\r\n                        if(newGrid[i][j] === 1){\r\n                            newGrid[i][j] = 0\r\n                        }\r\n                    }\r\n                }\r\n                return  {\r\n                    ...state,\r\n                    grid: newGrid\r\n                }\r\n            }\r\n            newGrid = simulateWaterFlow(state.grid, state.startPoint);\r\n            console.log(newGrid);\r\n            return {\r\n                ...state,\r\n                grid: newGrid\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {createStore} from 'redux';\r\nimport simulatorReducer from './simulator/reducer';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst rootReducer = combineReducers({simulator: simulatorReducer});\r\n\r\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}