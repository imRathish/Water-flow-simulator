{"version":3,"sources":["store/simulator/action.js","components/Steps/UserInputStep.js","store/simulator/util.js","components/Grid/Square.js","components/Grid/Grid.js","components/Obstacle/Obstacle.js","components/Obstacle/ObstacleContainer.js","components/Steps/SimulatorStep.js","components/Main.js","App.js","reportWebVitals.js","store/simulator/reducer.js","store/store.js","index.js"],"names":["UPDATE_NO_OF_ROWS","UPDATE_NO_OF_COLUMNS","UPDATE_NO_OF_OBSTRUCTIONS","UPDATE_NO_OF_STARTPOINT","UPDATE_GRID","INSERT_OBSTACLE","SIMULATEFLOW","RESET_USED_OBSTRUCTION","UPDATE_CELL","updateStartPoint","newStartPoint","type","startPoint","useStyles","makeStyles","root","width","UserInputStep","props","classes","dispatch","useDispatch","setCurrentStep","useSelector","simulator","rows","columns","obstructions","handleChange","event","value","id","target","console","log","className","Grid","container","spacing","direction","item","Typography","align","variant","gutterBottom","Slider","defaultValue","valueLabelDisplay","step","marks","min","max","onChange","Button","color","onClick","simulateWaterFlow","grid","startCell","x","y","length","Square","isStartPoint","isSimulate","useState","hoverState","setHoverState","useEffect","useDrop","accept","drop","monitor","didDrop","getItem","obstructionId","insertObstacle","collect","isOver","canDrop","ref","style","backgroundColor","cursor","opacity","height","borderStyle","borderWidth","borderColor","onMouseEnter","onMouseLeave","initialGrid","i","j","squares","row","push","display","flexWrap","Obstacle","useDrag","isDragging","drag","margin","ObstacleContainer","usedObstructions","obstruction_array","includes","map","index","Step2","setIsSimulate","resetStartPoint","DndProvider","backend","HTML5Backend","justify","md","size","disabled","Footer","theme","paper","marginTop","flexDirection","alignItems","avatar","form","submit","MainContainer","currentStep","Container","component","maxWidth","CssBaseline","Avatar","Box","mt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","state","action","newGrid","concat","createStore","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.c8a2ba8a.chunk.js","sourcesContent":["export const UPDATE_NO_OF_ROWS = \"UPDATE_NO_OF_ROWS\";\r\nexport const UPDATE_NO_OF_COLUMNS = \"UPDATE_NO_OF_COLUMNS\";\r\nexport const UPDATE_NO_OF_OBSTRUCTIONS = \"UPDATE_NO_OF_OBSTRUCTIONS\";\r\nexport const UPDATE_NO_OF_STARTPOINT = \"UPDATE_NO_OF_STARTPOINT\";\r\nexport const UPDATE_GRID = \"UPDATE_GRID\";\r\nexport const INSERT_OBSTACLE = \"INSERT_OBSTACLE\";\r\nexport const RESET = \"RESET\";\r\nexport const SIMULATEFLOW = \"SIMULATEFLOW\";\r\nexport const RESET_USED_OBSTRUCTION = \"RESET_USED_OBSTRUCTION\";\r\nexport const UPDATE_CELL = \"UPDATE_CELL\";\r\n\r\nexport const updateRows = (newRows) => {\r\n  return { type: UPDATE_NO_OF_ROWS, rows: newRows };\r\n};\r\nexport const updateColumns = (newColumns) => {\r\n  return { type: UPDATE_NO_OF_COLUMNS, columns: newColumns };\r\n};\r\nexport const updateObstructions = (newObstructions) => {\r\n  return { type: UPDATE_NO_OF_OBSTRUCTIONS, obstructions: newObstructions };\r\n};\r\nexport const resetUsedObstruction = () => {\r\n  return { type: RESET_USED_OBSTRUCTION };\r\n};\r\nexport const updateStartPoint = (newStartPoint) => {\r\n  return { type: UPDATE_NO_OF_STARTPOINT, startPoint: newStartPoint };\r\n};\r\nexport const insertObstacle = (x, y, obstructionId) => {\r\n  return { type: INSERT_OBSTACLE, x, y, obstructionId: obstructionId };\r\n};\r\nexport const updateGrid = (newGrid) => {\r\n  return { type: UPDATE_GRID, grid: newGrid };\r\n};\r\nexport const simulateFlow = () => {\r\n  return { type: SIMULATEFLOW };\r\n};\r\nexport const updateCell = (x, y, value) => {\r\n  return { type: UPDATE_CELL, x, y, value };\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Grid, Slider, Typography } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  updateRows,\r\n  updateColumns,\r\n  updateObstructions,\r\n} from \"../../store/simulator/action\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n});\r\n\r\nexport default function UserInputStep(props) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const { setCurrentStep } = props;\r\n  const { rows, columns, obstructions } = useSelector(\r\n    ({ simulator }) => simulator\r\n  );\r\n\r\n  const handleChange = (event, value) => {\r\n    const id = event.target.id;\r\n    console.log(event.target.id, value);\r\n    if (id === \"rows-slider\") {\r\n      dispatch(updateRows(value));\r\n    } else if (id === \"columns-slider\") {\r\n      dispatch(updateColumns(value));\r\n    } else if (id === \"obstruction-slider\") dispatch(updateObstructions(value));\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setCurrentStep(1);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3} direction=\"column\">\r\n        <Grid item>\r\n          <Typography align=\"center\" id=\"create-grid\" variant=\"h6\" gutterBottom>\r\n            Grid Creation\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography id=\"rows-slider-label\" gutterBottom>\r\n            Number of rows\r\n          </Typography>\r\n          <Slider\r\n            value={rows}\r\n            id=\"rows-slider\"\r\n            defaultValue={rows}\r\n            aria-labelledby=\"rows-slider-label\"\r\n            valueLabelDisplay=\"auto\"\r\n            step={1}\r\n            marks\r\n            min={1}\r\n            max={10}\r\n            onChange={handleChange}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography id=\"columns-slider-label\" gutterBottom>\r\n            Number of columns\r\n          </Typography>\r\n          <Slider\r\n            value={columns}\r\n            id=\"columns-slider\"\r\n            defaultValue={columns}\r\n            aria-labelledby=\"columns-slider-label\"\r\n            valueLabelDisplay=\"auto\"\r\n            step={1}\r\n            marks\r\n            min={1}\r\n            max={10}\r\n            onChange={handleChange}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography id=\"obstruction-slider-label\" gutterBottom>\r\n            Number of obstruction\r\n          </Typography>\r\n          <Slider\r\n            value={obstructions}\r\n            id=\"obstruction-slider\"\r\n            defaultValue={obstructions}\r\n            aria-labelledby=\"obstruction-slider-label\"\r\n            valueLabelDisplay=\"auto\"\r\n            step={1}\r\n            marks\r\n            min={1}\r\n            max={10}\r\n            onChange={handleChange}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleNext}>\r\n            Next\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","export const simulateWaterFlow = (grid, startCell) => {\r\n  console.log(startCell);\r\n\r\n  if (grid[startCell.x][startCell.y] === 0) {\r\n    grid[startCell.x][startCell.y] = 1;\r\n  }\r\n\r\n  if (startCell.x === grid.length - 1) {\r\n    return grid;\r\n  }\r\n  if (grid[startCell.x + 1][startCell.y] === 0) {\r\n    return simulateWaterFlow(grid, { x: startCell.x + 1, y: startCell.y });\r\n  }\r\n  if (startCell.x !== 0 && grid[startCell.x + 1][startCell.y] === -1) {\r\n    if (grid[startCell.x][startCell.y + 1] === 0) {\r\n      grid = simulateWaterFlow(grid, { x: startCell.x, y: startCell.y + 1 });\r\n    }\r\n    if (grid[startCell.x][startCell.y - 1] === 0) {\r\n      grid = simulateWaterFlow(grid, { x: startCell.x, y: startCell.y - 1 });\r\n    }\r\n    return grid;\r\n  }\r\n  return grid;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport {\r\n  insertObstacle,\r\n  simulateFlow,\r\n  updateStartPoint,\r\n  updateCell,\r\n} from \"../../store/simulator/action\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { simulateWaterFlow } from \"../../store/simulator/util\";\r\n\r\nexport default function Square(props) {\r\n  const { value, x, y, isStartPoint, isSimulate } = props;\r\n  const dispatch = useDispatch();\r\n  const { startPoint } = useSelector(({ simulator }) => simulator);\r\n\r\n  const [hoverState, setHoverState] = useState(false);\r\n\r\n  const handleSimulate = () => {\r\n    if (\r\n      isStartPoint &&\r\n      isSimulate &&\r\n      (startPoint === null ||\r\n        (startPoint && startPoint.x === -1 && startPoint.y === -1))\r\n    ) {\r\n      dispatch(updateStartPoint({ x: x, y }));\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (startPoint) {\r\n        console.log(startPoint)\r\n      // const simulatedGrid = simulateWaterFlow(grid, startPoint)\r\n      // for(let i=0;i<rows+1;i++){\r\n      //     setTimeout(()=>{\r\n      //         for(let j=0;j<columns;j++){\r\n      //             if(simulatedGrid[i][j]===1){\r\n      //                 dispatch(updateCell(i,j,1))\r\n      //             }\r\n      //         }\r\n      //     },1000)\r\n\r\n      // }\r\n      dispatch(simulateFlow());\r\n    }\r\n  }, [startPoint]);\r\n\r\n  const computeBGColour = () => {\r\n    if (value === 1) {\r\n        return \"#2B78E3\";\r\n      }\r\n    if (isStartPoint) {\r\n      return \"#cadef9\";\r\n    }\r\n    if (isOver && value === 0) {\r\n      return \"lightgreen\";\r\n    }\r\n    if (value === -1) {\r\n      return \"black\";\r\n    }\r\n   \r\n\r\n    return \"white\";\r\n  };\r\n\r\n  const [{ canDrop, isOver }, drop] = useDrop(() => ({\r\n    accept: [\"OBSTACLE\"],\r\n    drop: (props, monitor) => {\r\n      if (monitor.didDrop()) {\r\n        return;\r\n      }\r\n      const item = monitor.getItem();\r\n      console.log(item);\r\n      dispatch(insertObstacle(x, y, item.value));\r\n    },\r\n    collect: (monitor) => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop(),\r\n    }),\r\n  }));\r\n\r\n  const mouseEnterHandler = () => {\r\n    setHoverState(true);\r\n  };\r\n\r\n  const mouseLeaveHandler = () => {\r\n    setHoverState(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={(!isStartPoint && value !== -1) ? drop : null}\r\n      style={{\r\n        backgroundColor: computeBGColour(), //StartPoint ? \"blue\" : isOver ? \"green\" : squareColor,\r\n        cursor: isStartPoint && isSimulate ? \"pointer\" : \"default\",\r\n        opacity: isStartPoint && hoverState && isSimulate ? 0.5 : 1,\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        borderStyle: \"solid\",\r\n        borderWidth: 0.5,\r\n        borderColor: \"black\",\r\n      }}\r\n      onClick={handleSimulate}\r\n      onMouseEnter={mouseEnterHandler}\r\n      onMouseLeave={mouseLeaveHandler}\r\n    >\r\n      {\"\"}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport Square from \"./Square\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { updateGrid } from \"../../store/simulator/action\";\r\n\r\nexport default function Grid(props) {\r\n  const dispatch = useDispatch();\r\n  const { isSimulate } = props;\r\n  const { rows, columns, grid } = useSelector(({ simulator }) => simulator);\r\n\r\n  useEffect(() => {\r\n    let initialGrid = [];\r\n    for (let i = 0; i < rows + 1; i++) {\r\n      initialGrid[i] = [];\r\n      for (let j = 0; j < columns; j++) {\r\n        initialGrid[i][j] = 0;\r\n      }\r\n    }\r\n    dispatch(updateGrid(initialGrid));\r\n  }, []);\r\n\r\n  let squares = [];\r\n  if (grid) {\r\n    for (let i = 0; i < grid.length; i++) {\r\n      let row = grid[i];\r\n      console.log(row);\r\n      for (let j = 0; j < row.length; j++) {\r\n        squares.push(\r\n          <div\r\n            key={i + \"-\" + j}\r\n            style={{\r\n              width: 100 / row.length + \"%\",\r\n              height: 100 / grid.length + \"%\",\r\n            }}\r\n          >\r\n            <Square\r\n              value={grid[i][j]}\r\n              x={i}\r\n              y={j}\r\n              isStartPoint={i === 0 ? true : false}\r\n              isSimulate={isSimulate}\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"300px\",\r\n        height: \"300px\",\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n      }}\r\n    >\r\n      {squares}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\n\r\nexport default function Obstacle(props) {\r\n  const { value } = props;\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: \"OBSTACLE\",\r\n    item: { type: \"OBSTACLE\", value: value },\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <div\r\n      ref={drag}\r\n      style={{\r\n        opacity: isDragging ? 0.5 : 1,\r\n        cursor: \"grab\",\r\n        backgroundColor: \"black\",\r\n        width: \"20px\",\r\n        height: \"20px\",\r\n        borderStyle: \"solid\",\r\n        borderWidth: 0.5,\r\n        borderColor: \"black\",\r\n        margin: 5,\r\n      }}\r\n    >\r\n      {\" \"}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Obstacle from \"./Obstacle\";\r\n\r\nexport default function ObstacleContainer() {\r\n  const { obstructions, usedObstructions } = useSelector(\r\n    ({ simulator }) => simulator\r\n  );\r\n  let obstruction_array = [];\r\n\r\n  if (obstructions) {\r\n    for (let i = 1; i <= obstructions; i++) {\r\n      if (!usedObstructions.includes(i)) {\r\n        obstruction_array.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  let squares = [];\r\n  for (let i = 0; i < 5; i++) {\r\n    for (let j = 0; j < 2; j++) {\r\n      squares.push();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {obstruction_array.map((index) => {\r\n        return (\r\n          <div\r\n            key={\"Obstruction-\" + index}\r\n            style={{ width: 100 / 2 + \"%\", height: 100 / 5 + \"%\" }}\r\n          >\r\n            <Obstacle key={index} value={index} />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport GridMatrix from \"../Grid/Grid\";\r\nimport { Button, Typography, Grid } from \"@material-ui/core\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport ObstacleContainer from \"../Obstacle/ObstacleContainer\";\r\nimport {\r\n  updateStartPoint,\r\n  resetUsedObstruction,\r\n} from \"../../store/simulator/action\";\r\n\r\nexport default function Step2(props) {\r\n  const dispatch = useDispatch();\r\n  const { usedObstructions, startPoint } = useSelector(\r\n    ({ simulator }) => simulator\r\n  );\r\n  const [isSimulate, setIsSimulate] = useState(false);\r\n  const { setCurrentStep } = props;\r\n\r\n  const handleBack = () => {\r\n    if (isSimulate) {\r\n      setIsSimulate(false);\r\n      resetStartPoint();\r\n      return;\r\n    }\r\n    setCurrentStep(0);\r\n  };\r\n  const handleStartSimulation = () => {\r\n    setIsSimulate(true);\r\n  };\r\n  const resetStartPoint = () => {\r\n    dispatch(updateStartPoint({ x: -1, y: -1 }));\r\n  };\r\n  const resetObstacles = () => {\r\n    dispatch(resetUsedObstruction());\r\n  };\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item md={12}>\r\n          <Typography id=\"create-grid\" align=\"center\" gutterBottom>\r\n            {isSimulate\r\n              ? \"Select the workflow start point by clicking on any of the blue box\"\r\n              : \"Drag the obstruction and place it inside the grid (white boxes)\"}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <GridMatrix {...props} isSimulate={isSimulate} />\r\n        </Grid>\r\n        {!isSimulate && (\r\n          <Grid item>\r\n            <ObstacleContainer usedObstructions={usedObstructions} />\r\n          </Grid>\r\n        )}\r\n\r\n        <Grid item container spacing={2} justify=\"center\">\r\n          <Grid item>\r\n            <Button\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              //color=\"secondary\"\r\n              onClick={handleBack}\r\n            >\r\n              Back\r\n            </Button>\r\n          </Grid>\r\n\r\n          {isSimulate && (\r\n            <Grid item>\r\n              <Button\r\n                disabled={\r\n                  !startPoint || startPoint.x === -1 || startPoint.y === -1\r\n                }\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                //color=\"secondary\"\r\n                onClick={resetStartPoint}\r\n              >\r\n                Reset start point\r\n              </Button>\r\n            </Grid>\r\n          )}\r\n          {!isSimulate && (\r\n            <Grid item>\r\n              <Button\r\n                disabled={usedObstructions.length === 0}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                //color=\"secondary\"\r\n                onClick={resetObstacles}\r\n              >\r\n                Reset Obstacles\r\n              </Button>\r\n            </Grid>\r\n          )}\r\n          {!isSimulate && (\r\n            <Grid item>\r\n              <Button\r\n                disabled={usedObstructions.length === 0}\r\n                size=\"small\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleStartSimulation}\r\n              >\r\n                Start simulation\r\n              </Button>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </DndProvider>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Avatar,\r\n  CssBaseline,\r\n  Box,\r\n  Typography,\r\n  Container,\r\n} from \"@material-ui/core\";\r\nimport OpacityIcon from \"@material-ui/icons/Opacity\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport UserInputStep from \"./Steps/UserInputStep\";\r\nimport SimulatorStep from \"./Steps/SimulatorStep\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Created by \"}\r\n      {\" Subramanyam S S\"}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    //backgroundColor: theme.palette.secondary.main,\r\n    backgroundColor: \"#0089f5\"\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function MainContainer() {\r\n  const classes = useStyles();\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <OpacityIcon />\r\n        </Avatar>\r\n        <Typography gutterBottom component=\"h1\" variant=\"h5\">\r\n          Waterflow Simulator\r\n        </Typography>\r\n        <br></br>\r\n\r\n        {currentStep === 0 && <UserInputStep setCurrentStep={setCurrentStep} />}\r\n        {currentStep === 1 && <SimulatorStep setCurrentStep={setCurrentStep} />}\r\n      </div>\r\n      <Box mt={8}>\r\n        <Footer />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div>\n        <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n  UPDATE_NO_OF_ROWS,\r\n  UPDATE_NO_OF_COLUMNS,\r\n  UPDATE_NO_OF_OBSTRUCTIONS,\r\n  RESET_USED_OBSTRUCTION,\r\n  UPDATE_NO_OF_STARTPOINT,\r\n  INSERT_OBSTACLE,\r\n  UPDATE_GRID,\r\n  SIMULATEFLOW,\r\n  UPDATE_CELL,\r\n} from \"./action\";\r\nimport { simulateWaterFlow } from \"./util\";\r\n\r\nconst initialState = {\r\n  rows: 1,\r\n  columns: 1,\r\n  obstructions: 1,\r\n  usedObstructions: [],\r\n  startPoint: null,\r\n  grid: null,\r\n};\r\n\r\nexport default function simulatorReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case UPDATE_NO_OF_ROWS: {\r\n      return {\r\n        ...state,\r\n        rows: action.rows,\r\n      };\r\n    }\r\n    case UPDATE_NO_OF_COLUMNS: {\r\n      return {\r\n        ...state,\r\n        columns: action.columns,\r\n      };\r\n    }\r\n    case UPDATE_NO_OF_OBSTRUCTIONS: {\r\n      return {\r\n        ...state,\r\n        obstructions: action.obstructions,\r\n      };\r\n    }\r\n    case RESET_USED_OBSTRUCTION: {\r\n      let newGrid = state.grid;\r\n      for (let i = 0; i < state.rows + 1; i++) {\r\n        for (let j = 0; j < state.columns; j++) {\r\n          if (newGrid[i][j] === -1) {\r\n            newGrid[i][j] = 0;\r\n          }\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        grid: newGrid,\r\n        usedObstructions: [],\r\n      };\r\n    }\r\n    case UPDATE_NO_OF_STARTPOINT: {\r\n      return {\r\n        ...state,\r\n        startPoint: action.startPoint,\r\n      };\r\n    }\r\n    case UPDATE_GRID: {\r\n      return {\r\n        ...state,\r\n        grid: action.grid,\r\n        usedObstructions: [],\r\n      };\r\n    }\r\n    case INSERT_OBSTACLE: {\r\n      let grid = state.grid;\r\n      grid[action.x][action.y] = -1;\r\n      return {\r\n        ...state,\r\n        usedObstructions: state.usedObstructions.concat(action.obstructionId),\r\n        grid: grid,\r\n      };\r\n    }\r\n    case SIMULATEFLOW: {\r\n      let newGrid = state.grid;\r\n      console.log(newGrid);\r\n      if (state.startPoint.x === -1 && state.startPoint.y === -1) {\r\n        for (let i = 0; i < newGrid.length; i++) {\r\n            let row = newGrid[i];\r\n          for (let j = 0; j < row.length; j++) {\r\n            if (newGrid[i][j] === 1) {\r\n              newGrid[i][j] = 0;\r\n            }\r\n          }\r\n        }\r\n        return {\r\n          ...state,\r\n          grid: newGrid,\r\n        };\r\n      }\r\n      newGrid = simulateWaterFlow(state.grid, state.startPoint);\r\n      return {\r\n        ...state,\r\n        grid: newGrid,\r\n      };\r\n    }\r\n    case UPDATE_CELL: {\r\n      const newGrid = state.grid;\r\n      newGrid[action.x][action.y] = action.value;\r\n\r\n      return {\r\n        ...state,\r\n        grid: newGrid,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {createStore} from 'redux';\r\nimport simulatorReducer from './simulator/reducer';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst rootReducer = combineReducers({simulator: simulatorReducer});\r\n\r\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}